"use client"

import { useEffect, useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { Badge } from "@/components/ui/badge"
import {
  AlertCircle, 
  RefreshCw, 
  Link2, 
  Facebook,
  Twitter, 
  Instagram,
  Linkedin,
  Youtube,
  Plus,
  CheckCircle,
  PinIcon,
  LineChart,
  Info,
  MessageCircle,
  Zap
} from "lucide-react"
import { useToast } from "@/components/ui/use-toast"
import { useRouter } from "next/navigation"
import { getAPI } from "@/lib/api"
import { CircularNav } from "./CircularNav"

// Define types locally to avoid import issues
interface SocialPlatform {
  id: number;
  name: string;
  display_name: string;
  auth_url: string;
  is_active: boolean;
}

interface SocialAccount {
  id: number;
  account_id: string;
  account_name: string;
  account_type: string;
  platform: {
    id: number;
    name: string;
    display_name: string;
  };
  profile_picture_url: string | null;
  status: string;
  is_primary: boolean;
  followers?: number;
  engagement_rate?: number;
  reach?: number;
  created_at: string;
  updated_at: string;
}

// Simple social platforms API client
const socialPlatformsApi = {
  async getAccounts(): Promise<SocialAccount[]> {
    const baseUrl = process.env.NEXT_PUBLIC_API_URL || 'http://127.0.0.1:8000/api';
    const headers = {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,
    };
    
    const response = await fetch(`${baseUrl}/social_platforms/api/accounts/`, {
      headers,
    });

    if (!response.ok) {
      throw new Error('Failed to fetch social accounts');
    }

    return await response.json();
  },
  
  async initiateOAuth(platformId: string): Promise<{ authorization_url: string }> {
    const baseUrl = process.env.NEXT_PUBLIC_API_URL || 'http://127.0.0.1:8000/api';
    const headers = {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,
    };
    
    const response = await fetch(`${baseUrl}/social_platforms/api/oauth/init/${platformId}/`, {
      headers,
    });

    if (!response.ok) {
      throw new Error('Failed to initiate OAuth flow');
    }

    return await response.json();
  }
};

// Platform configurations with expanded icons and platforms
const availablePlatforms = [
  {
    id: "instagram",
    name: "Instagram",
    icon: Instagram,
    description: "Share photos and stories, manage your Instagram presence",
    color: "from-pink-500 via-purple-500 to-orange-500",
    popular: true
  },
  {
    id: "facebook",
    name: "Facebook",
    icon: Facebook,
    description: "Manage your Facebook pages and content",
    color: "from-blue-600 to-blue-500",
    popular: true
  },
  {
    id: "twitter",
    name: "Twitter/X",
    icon: Twitter, 
    description: "Schedule tweets and manage your Twitter presence",
    color: "from-blue-400 to-blue-300",
    popular: true
  },
  {
    id: "linkedin",
    name: "LinkedIn",
    icon: Linkedin,
    description: "Share professional updates and manage company pages",
    color: "from-blue-700 to-blue-600",
    popular: false
  },
  {
    id: "youtube",
    name: "YouTube",
    icon: Youtube,
    description: "Manage your YouTube channel and content",
    color: "from-red-600 to-red-500",
    popular: true
  },
  {
    id: "pinterest",
    name: "Pinterest",
    icon: PinIcon,
    description: "Share pins and manage your Pinterest boards",
    color: "from-red-700 to-red-600",
    popular: false
  },
  {
    id: "google",
    name: "Google Ads",
    icon: LineChart,
    description: "Manage your Google Ads campaigns and analytics",
    color: "from-blue-500 to-green-500",
    popular: true
  },
  {
    id: "tiktok",
    name: "TikTok",
    icon: Zap,
    description: "Create and manage TikTok content and campaigns",
    color: "from-black to-gray-800",
    popular: true
  },
  {
    id: "threads",
    name: "Threads",
    icon: MessageCircle,
    description: "Share text-based updates and join conversations",
    color: "from-purple-600 to-purple-400",
    popular: false
  }
]

export default function PlatformConnectPage() {
  // Initialize as empty array to ensure proper typing
  const [connectedAccounts, setConnectedAccounts] = useState<SocialAccount[]>([])
  const [isLoading, setIsLoading] = useState(false)
  const [isConnecting, setIsConnecting] = useState<string | null>(null)
  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false)
  const [selectedPlatformId, setSelectedPlatformId] = useState<string | null>(null)
  const { toast } = useToast()
  const router = useRouter()
  
  // Check authentication status on mount
  useEffect(() => {
    const api = getAPI();
    setIsAuthenticated(api.isAuthenticated());
    
    if (api.isAuthenticated()) {
      loadConnectedAccounts();
    }
  }, []);

  // Function to load connected accounts from API
  const loadConnectedAccounts = async () => {
    setIsLoading(true)
    try {
      const accounts = await socialPlatformsApi.getAccounts()
        setConnectedAccounts(accounts)
    } catch (err: any) {
      console.error('Error loading accounts:', err)
      
      // Handle various errors but don't immediately redirect
      toast({
        title: "Error",
        description: "Failed to load connected accounts",
        variant: "destructive",
      })
      
      // Ensure we have an empty array on error
      setConnectedAccounts([])
    } finally {
      setIsLoading(false)
    }
  }

  // Handle connecting a social platform
  const handleConnectPlatform = async (platform: typeof availablePlatforms[0]) => {
    if (!isAuthenticated) {
      toast({
        title: "Authentication Required",
        description: "Please log in to connect social accounts",
        variant: "destructive",
      })
      return
    }
    
    setIsConnecting(platform.id)
    setSelectedPlatformId(platform.id)
    
    try {
      // Get the authorization URL from backend
      const response = await socialPlatformsApi.initiateOAuth(platform.id)
      
      // Open the authorization URL in a new window
      window.open(response.authorization_url, '_blank', 'width=600,height=700')
      
      // Show a toast with instructions
      toast({
        title: "Authorization Started",
        description: "Please complete the authorization in the opened window, then return to this page and click 'Refresh' to see your connected account.",
      })
    } catch (err: any) {
      console.error(`Error connecting ${platform.name}:`, err)
      toast({
        title: "Connection Failed",
        description: `Unable to connect to ${platform.name}. Please try again.`,
        variant: "destructive",
      })
    } finally {
      setIsConnecting(null)
    }
  }

  // Handle disconnecting a social account
  const handleDisconnectAccount = async (accountId: number) => {
    try {
      // Not implemented - would make a DELETE request to the backend
      toast({
        title: "Account Disconnected",
        description: "Your social account has been disconnected.",
      })
      
      // Remove from list in UI
      setConnectedAccounts(accounts => accounts.filter(account => account.id !== accountId))
    } catch (err) {
      console.error('Error disconnecting account:', err)
      toast({
        title: "Error",
        description: "Failed to disconnect account. Please try again.",
        variant: "destructive",
      })
    }
  }

  // Generate an appropriate icon for a platform
  const getPlatformIcon = (platform: string) => {
    // Just returning a simple fallback for now
    return "/placeholder-icon.png"
  }
  
  return (
    <div className="container mx-auto space-y-8 p-4 py-8">
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8">
        <div>
          <h1 className="text-3xl font-bold">Connect Platforms</h1>
          <p className="text-muted-foreground">
            Connect your social media accounts and start managing them in one place
          </p>
        </div>
        <div className="flex items-center gap-2">
          <Button 
            variant="outline" 
            size="sm"
            onClick={loadConnectedAccounts}
            disabled={isLoading}
          >
            {isLoading ? (
              <>
                <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                Loading...
              </>
            ) : (
              <>
                <RefreshCw className="mr-2 h-4 w-4" />
                Refresh
              </>
            )}
          </Button>
          <Button 
            size="sm"
            onClick={() => router.push('/dashboard')}
          >
            Back to Dashboard
          </Button>
        </div>
      </div>

      {!isAuthenticated && (
        <Alert variant="destructive" className="mb-6">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Authentication Required</AlertTitle>
          <AlertDescription>
            You need to be logged in to connect social media accounts.
            <Button
              onClick={() => router.push('/auth/login')}
              variant="outline"
              size="sm"
              className="ml-2"
            >
              Log In
            </Button>
          </AlertDescription>
        </Alert>
      )}

      <Tabs defaultValue="connected">
        <TabsList className="mb-4">
          <TabsTrigger value="connected">Connected Accounts</TabsTrigger>
          <TabsTrigger value="available">Available Platforms</TabsTrigger>
        </TabsList>

        <TabsContent value="connected">
          {isAuthenticated ? (
            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
              {isLoading ? (
                // Show placeholders when loading
                Array(3).fill(0).map((_, i) => (
                  <Card key={i} className="opacity-50">
                    <CardHeader className="animate-pulse">
                      <div className="flex items-center space-x-4">
                        <div className="h-12 w-12 rounded-full bg-muted"></div>
                        <div className="space-y-2">
                          <div className="h-4 w-32 bg-muted rounded"></div>
                          <div className="h-4 w-24 bg-muted rounded"></div>
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <div className="h-12 bg-muted rounded"></div>
                    </CardContent>
                  </Card>
                ))
              ) : connectedAccounts.length > 0 ? (
                // Show connected accounts
                connectedAccounts.map((account) => (
                  <Card key={account.id} className="overflow-hidden">
                    <CardHeader className="pb-2">
                      <div className="flex items-center space-x-4">
                        <div className="h-12 w-12 rounded-full bg-muted flex items-center justify-center overflow-hidden">
                          {account.profile_picture_url ? (
                            <img 
                              src={account.profile_picture_url} 
                              alt={account.account_name} 
                              className="h-full w-full object-cover"
                            />
                          ) : (
                            <img 
                              src={getPlatformIcon(account.platform?.name || '')} 
                              alt={account.platform?.name || 'platform'} 
                              className="h-8 w-8"
                            />
                          )}
                        </div>
                        <div>
                          <CardTitle className="text-xl">{account.account_name}</CardTitle>
                          <CardDescription className="capitalize">{account.platform?.display_name || account.account_type}</CardDescription>
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent className="pb-4">
                      <div className="flex items-center space-x-4 justify-between">
                        <Badge variant={account.status === 'active' ? 'default' : 'secondary'}>
                          {account.status}
                        </Badge>
                        {account.is_primary && (
                          <Badge variant="outline">Primary</Badge>
                        )}
                      </div>
                    </CardContent>
                    <CardFooter className="pt-0 border-t border-border/40 flex justify-end">
                    <Button
                      variant="destructive"
                      size="sm"
                      onClick={() => handleDisconnectAccount(account.id)}
                    >
                      Disconnect
                    </Button>
                  </CardFooter>
                    </Card>
              ))}
              </div>
            ) : (
            <Card>
              <CardHeader>
                <CardTitle>No Connected Accounts</CardTitle>
                <CardDescription>
                  You haven't connected any social media accounts yet.
                </CardDescription>
              </CardHeader>
              <CardContent className="flex justify-center">
                <Button onClick={() => {
                  const availableTab = document.querySelector('[value="available"]') as HTMLElement;
                  if (availableTab) availableTab.click();
                }}>
                    <Plus className="mr-2 h-4 w-4" />
                    Connect Platform
                  </Button>
              </CardContent>
            </Card>
            )}
          </TabsContent>

        <TabsContent value="available">
            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
              {availablePlatforms.map((platform) => {
                // Add safety check for array before using .some()
                const isConnected = Array.isArray(connectedAccounts) && connectedAccounts.some(
                  account => account?.platform?.name?.toLowerCase() === platform.id.toLowerCase() && account.status === 'active'
                );
                
                return (
                <Card 
                  key={platform.id} 
                  id={`platform-card-${platform.id}`}
                  className={`overflow-hidden transition-all duration-300 ${selectedPlatformId === platform.id ? 'ring-2 ring-accent shadow-lg' : ''}`}
                >
                  <CardHeader className="pb-2">
                    <div className="flex items-center space-x-2">
                      <div className={`p-3 rounded-full shadow-lg bg-gradient-to-br ${platform.color}`}>
                        <platform.icon className="h-5 w-5 text-white" />
                          </div>
                          <div>
                        <CardTitle className="text-xl">{platform.name}</CardTitle>
                        {platform.popular && (
                          <Badge className="mt-1">Popular</Badge>
                        )}
                        </div>
                      </div>
                    </CardHeader>
                  <CardContent>
                      <p className="text-sm text-muted-foreground">
                      {platform.description}
                      </p>
                    </CardContent>
                    <CardFooter>
                      <Button
                      className="w-full"
                      onClick={() => handleConnectPlatform(platform)}
                      disabled={isConnecting === platform.id}
                        variant={isConnected ? "outline" : "default"}
                      >
                      {isConnecting === platform.id ? (
                          <>
                            <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                            Connecting...
                          </>
                        ) : isConnected ? (
                          <>
                          <CheckCircle className="mr-2 h-4 w-4" />
                            Connected
                          </>
                        ) : (
                          <>
                            <Link2 className="mr-2 h-4 w-4" />
                          Connect {platform.name}
                          </>
                        )}
                      </Button>
                    </CardFooter>
                  </Card>
                );
              })}
            </div>
          </TabsContent>
        </Tabs>
    </div>
  )
}
