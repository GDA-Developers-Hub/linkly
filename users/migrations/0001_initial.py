# Generated by Django 5.0.1 on 2025-04-17 20:46

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('is_business', models.BooleanField(default=False)),
                ('company_name', models.CharField(blank=True, max_length=255)),
                ('phone_number', models.CharField(blank=True, max_length=20)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/')),
                ('google_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('facebook_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('facebook_page_id', models.CharField(blank=True, max_length=255, null=True)),
                ('linkedin_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('linkedin_company_id', models.CharField(blank=True, max_length=255, null=True)),
                ('twitter_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('youtube_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('youtube_brand_id', models.CharField(blank=True, max_length=255, null=True)),
                ('telegram_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('instagram_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('instagram_business_id', models.CharField(blank=True, max_length=255, null=True)),
                ('tiktok_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('tiktok_business_id', models.CharField(blank=True, max_length=255, null=True)),
                ('instagram_handle', models.CharField(blank=True, max_length=255)),
                ('instagram_profile_url', models.URLField(blank=True)),
                ('instagram_business_name', models.CharField(blank=True, max_length=255)),
                ('instagram_business_category', models.CharField(blank=True, max_length=255)),
                ('twitter_handle', models.CharField(blank=True, max_length=255)),
                ('twitter_profile_url', models.URLField(blank=True)),
                ('twitter_business_type', models.CharField(blank=True, max_length=255)),
                ('linkedin_profile', models.URLField(blank=True)),
                ('linkedin_company_page', models.URLField(blank=True)),
                ('linkedin_company_name', models.CharField(blank=True, max_length=255)),
                ('youtube_channel', models.URLField(blank=True)),
                ('youtube_channel_id', models.CharField(blank=True, max_length=255)),
                ('youtube_channel_title', models.CharField(blank=True, max_length=255)),
                ('youtube_brand_name', models.CharField(blank=True, max_length=255)),
                ('facebook_page', models.URLField(blank=True)),
                ('facebook_page_name', models.CharField(blank=True, max_length=255)),
                ('facebook_page_category', models.CharField(blank=True, max_length=255)),
                ('tiktok_handle', models.CharField(blank=True, max_length=255)),
                ('tiktok_profile_url', models.URLField(blank=True)),
                ('tiktok_business_name', models.CharField(blank=True, max_length=255)),
                ('tiktok_business_category', models.CharField(blank=True, max_length=255)),
                ('telegram_username', models.CharField(blank=True, max_length=255)),
                ('telegram_chat_id', models.CharField(blank=True, max_length=255)),
                ('telegram_channel_name', models.CharField(blank=True, max_length=255)),
                ('google_access_token', models.TextField(blank=True, null=True)),
                ('facebook_access_token', models.TextField(blank=True, null=True)),
                ('facebook_page_token', models.TextField(blank=True, null=True)),
                ('linkedin_access_token', models.TextField(blank=True, null=True)),
                ('linkedin_company_token', models.TextField(blank=True, null=True)),
                ('twitter_access_token', models.TextField(blank=True, null=True)),
                ('twitter_access_token_secret', models.TextField(blank=True, null=True)),
                ('youtube_access_token', models.TextField(blank=True, null=True)),
                ('youtube_refresh_token', models.TextField(blank=True, null=True)),
                ('youtube_brand_token', models.TextField(blank=True, null=True)),
                ('telegram_bot_token', models.TextField(blank=True, null=True)),
                ('instagram_access_token', models.TextField(blank=True, null=True)),
                ('instagram_business_token', models.TextField(blank=True, null=True)),
                ('tiktok_access_token', models.TextField(blank=True, null=True)),
                ('tiktok_business_token', models.TextField(blank=True, null=True)),
                ('google_token_expiry', models.DateTimeField(null=True)),
                ('facebook_token_expiry', models.DateTimeField(null=True)),
                ('facebook_page_token_expiry', models.DateTimeField(null=True)),
                ('linkedin_token_expiry', models.DateTimeField(null=True)),
                ('linkedin_company_token_expiry', models.DateTimeField(null=True)),
                ('twitter_token_expiry', models.DateTimeField(null=True)),
                ('youtube_token_expiry', models.DateTimeField(null=True)),
                ('youtube_brand_token_expiry', models.DateTimeField(null=True)),
                ('telegram_token_expiry', models.DateTimeField(null=True)),
                ('instagram_token_expiry', models.DateTimeField(null=True)),
                ('instagram_business_token_expiry', models.DateTimeField(null=True)),
                ('tiktok_token_expiry', models.DateTimeField(null=True)),
                ('tiktok_business_token_expiry', models.DateTimeField(null=True)),
                ('has_facebook_business', models.BooleanField(default=False)),
                ('has_instagram_business', models.BooleanField(default=False)),
                ('has_linkedin_company', models.BooleanField(default=False)),
                ('has_youtube_brand', models.BooleanField(default=False)),
                ('has_twitter_business', models.BooleanField(default=False)),
                ('has_tiktok_business', models.BooleanField(default=False)),
                ('has_telegram_channel', models.BooleanField(default=False)),
                ('facebook_page_followers', models.IntegerField(default=0)),
                ('instagram_business_followers', models.IntegerField(default=0)),
                ('linkedin_company_followers', models.IntegerField(default=0)),
                ('youtube_subscribers', models.IntegerField(default=0)),
                ('twitter_followers', models.IntegerField(default=0)),
                ('tiktok_followers', models.IntegerField(default=0)),
                ('telegram_subscribers', models.IntegerField(default=0)),
                ('metrics_last_updated', models.DateTimeField(null=True)),
                ('business_description', models.TextField(blank=True)),
                ('website', models.URLField(blank=True)),
                ('industry', models.CharField(blank=True, max_length=100)),
                ('two_factor_enabled', models.BooleanField(default=False)),
                ('two_factor_secret', models.CharField(blank=True, max_length=32)),
                ('backup_codes', models.JSONField(blank=True, default=list)),
                ('access_token_jwt', models.TextField(blank=True, null=True)),
                ('refresh_token_jwt', models.TextField(blank=True, null=True)),
                ('token_created_at', models.DateTimeField(null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
